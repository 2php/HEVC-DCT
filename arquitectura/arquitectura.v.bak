module arquitectura
#(
	//paramteros de entrada y salida
	parameter WIDTH_X = 16;
	parameter WIDTH_Y = 22;
	
	//parametros de dct
	parameter WIDTH_XDCT1 = 16,
	parameter WIDTH_YDCT1 = 21,
	parameter WIDTH_XDCT2 = 21,
	parameter WIDTH_YDCT2 = 21,
	
	//parametros de idct
	parameter WIDTH_XIDCT1 = 16,
	parameter WIDTH_YIDCT1 = 21,
	parameter WIDTH_XIDCT2 = 21,
	parameter WIDTH_YIDCT2 = 21,
	
	//nombres de estados 
	parameter   IDLE = 3'b000,
	parameter   ONE_DCT = 3'b001,
	parameter   LOAD_TRANS = 3'b010,
	parameter   UNLOAD_TRANS = 3'b011,
	parameter   TWO_DCT = 3'b100
)
(	
	
	input wire signed [WIDTH_X-1:0] x0,
	input wire signed [WIDTH_X-1:0] x1,
	input wire signed [WIDTH_X-1:0] x2,
	input wire signed [WIDTH_X-1:0] x3,
	input wire signed [WIDTH_X-1:0] x4,
	input wire signed [WIDTH_X-1:0] x5,
	input wire signed [WIDTH_X-1:0] x6,
	input wire signed [WIDTH_X-1:0] x7,
	input wire signed [WIDTH_X-1:0] x8,
	input wire signed [WIDTH_X-1:0] x9,
	input wire signed [WIDTH_X-1:0] x10,
	input wire signed [WIDTH_X-1:0] x11,
	input wire signed [WIDTH_X-1:0] x12,
	input wire signed [WIDTH_X-1:0] x13,
	input wire signed [WIDTH_X-1:0] x14,
	input wire signed [WIDTH_X-1:0] x15,
	input wire signed [WIDTH_X-1:0] x16,
	input wire signed [WIDTH_X-1:0] x17,
	input wire signed [WIDTH_X-1:0] x18,
	input wire signed [WIDTH_X-1:0] x19,
	input wire signed [WIDTH_X-1:0] x20,
	input wire signed [WIDTH_X-1:0] x21,
	input wire signed [WIDTH_X-1:0] x22,
	input wire signed [WIDTH_X-1:0] x23,
	input wire signed [WIDTH_X-1:0] x24,
	input wire signed [WIDTH_X-1:0] x25,
	input wire signed [WIDTH_X-1:0] x26,
	input wire signed [WIDTH_X-1:0] x27,
	input wire signed [WIDTH_X-1:0] x28,
	input wire signed [WIDTH_X-1:0] x29,
	input wire signed [WIDTH_X-1:0] x30,
	input wire signed [WIDTH_X-1:0] x31,
	
	input wire clk,rst,
	input wire load,
	input wire [1:0] size,
	input wire dct,
	input wire idct,
	
	output wire signed [WIDTH_Y-1:0] y0,
	output wire signed [WIDTH_Y-1:0] y1,
	output wire signed [WIDTH_Y-1:0] y2,
	output wire signed [WIDTH_Y-1:0] y3,
	output wire signed [WIDTH_Y-1:0] y4,
	output wire signed [WIDTH_Y-1:0] y5,
	output wire signed [WIDTH_Y-1:0] y6,
	output wire signed [WIDTH_Y-1:0] y7,
	output wire signed [WIDTH_Y-1:0] y8,
	output wire signed [WIDTH_Y-1:0] y9,
	output wire signed [WIDTH_Y-1:0] y10,
	output wire signed [WIDTH_Y-1:0] y11,
	output wire signed [WIDTH_Y-1:0] y12,
	output wire signed [WIDTH_Y-1:0] y13,
	output wire signed [WIDTH_Y-1:0] y14,
	output wire signed [WIDTH_Y-1:0] y15,
	output wire signed [WIDTH_Y-1:0] y16,
	output wire signed [WIDTH_Y-1:0] y17,
	output wire signed [WIDTH_Y-1:0] y18,
	output wire signed [WIDTH_Y-1:0] y19,
	output wire signed [WIDTH_Y-1:0] y20,
	output wire signed [WIDTH_Y-1:0] y21,
	output wire signed [WIDTH_Y-1:0] y22,
	output wire signed [WIDTH_Y-1:0] y23,
	output wire signed [WIDTH_Y-1:0] y24,
	output wire signed [WIDTH_Y-1:0] y25,
	output wire signed [WIDTH_Y-1:0] y26,
	output wire signed [WIDTH_Y-1:0] y27,
	output wire signed [WIDTH_Y-1:0] y28,
	output wire signed [WIDTH_Y-1:0] y29,
	output wire signed [WIDTH_Y-1:0] y30,
	output wire signed [WIDTH_Y-1:0] y31
	
); 
	wire load_1dct;
	wire load_trans;
	wire unload_trans;
	wire load_2dct;
	
	reg signed [WIDTH_XDCT1-1:0] inputDCT1 [31:0];
	wire signed [WIDTH_YDCT1-1:0] outputDCT1 [31:0];
	
	reg signed [WIDTH_XIDCT1-1:0] inputIDCT1 [31:0];
	wire signed [WIDTH_YIDCT1-1:0] outputIDCT1 [31:0];
	
	//selector de operacion (DCT o IDCT)
	always @(*)
	begin
		inputDCT1[0] = 0;
		inputDCT1[1] = 0;
		inputDCT1[2] = 0;
		inputDCT1[3] = 0;
		inputDCT1[4] = 0;
		inputDCT1[5] = 0;
		inputDCT1[6] = 0;
		inputDCT1[7] = 0;
		inputDCT1[8] = 0;
		inputDCT1[9] = 0;
		inputDCT1[10] = 0;
		inputDCT1[11] = 0;
		inputDCT1[12] = 0;
		inputDCT1[13] = 0;
		inputDCT1[14] = 0;
		inputDCT1[15] = 0;
		inputDCT1[16] = 0;
		inputDCT1[17] = 0;
		inputDCT1[18] = 0;
		inputDCT1[19] = 0;
		inputDCT1[20] = 0;
		inputDCT1[21] = 0;
		inputDCT1[22] = 0;
		inputDCT1[23] = 0;
		inputDCT1[24] = 0;
		inputDCT1[25] = 0;
		inputDCT1[26] = 0;
		inputDCT1[27] = 0;
		inputDCT1[28] = 0;
		inputDCT1[29] = 0;
		inputDCT1[30] = 0;
		inputDCT1[31] = 0;
		
		inputIDCT1[0] = 0;
		inputIDCT1[1] = 0;
		inputIDCT1[2] = 0;
		inputIDCT1[3] = 0;
		inputIDCT1[4] = 0;
		inputIDCT1[5] = 0;
		inputIDCT1[6] = 0;
		inputIDCT1[7] = 0;
		inputIDCT1[8] = 0;
		inputIDCT1[9] = 0;
		inputIDCT1[10] = 0;
		inputIDCT1[11] = 0;
		inputIDCT1[12] = 0;
		inputIDCT1[13] = 0;
		inputIDCT1[14] = 0;
		inputIDCT1[15] = 0;
		inputIDCT1[16] = 0;
		inputIDCT1[17] = 0;
		inputIDCT1[18] = 0;
		inputIDCT1[19] = 0;
		inputIDCT1[20] = 0;
		inputIDCT1[21] = 0;
		inputIDCT1[22] = 0;
		inputIDCT1[23] = 0;
		inputIDCT1[24] = 0;
		inputIDCT1[25] = 0;
		inputIDCT1[26] = 0;
		inputIDCT1[27] = 0;
		inputIDCT1[28] = 0;
		inputIDCT1[29] = 0;
		inputIDCT1[30] = 0;
		inputIDCT1[31] = 0;
		if (dct) begin
			inputDCT1[0] = x0;
			inputDCT1[1] = x1;
			inputDCT1[2] = x2;
			inputDCT1[3] = x3;
			inputDCT1[4] = x4;
			inputDCT1[5] = x5;
			inputDCT1[6] = x6;
			inputDCT1[7] = x7;
			inputDCT1[8] = x8;
			inputDCT1[9] = x9;
			inputDCT1[10] = x10;
			inputDCT1[11] = x11;
			inputDCT1[12] = x12;
			inputDCT1[13] = x13;
			inputDCT1[14] = x14;
			inputDCT1[15] = x15;
			inputDCT1[16] = x16;
			inputDCT1[17] = x17;
			inputDCT1[18] = x18;
			inputDCT1[19] = x19;
			inputDCT1[20] = x20;
			inputDCT1[21] = x21;
			inputDCT1[22] = x22;
			inputDCT1[23] = x23;
			inputDCT1[24] = x24;
			inputDCT1[25] = x25;
			inputDCT1[26] = x26;
			inputDCT1[27] = x27;
			inputDCT1[28] = x28;
			inputDCT1[29] = x29;
			inputDCT1[30] = x30;
			inputDCT1[31] = x31;
		end
		else if (idct) begin
			inputIDCT1[0] = x0;
			inputIDCT1[1] = x1;
			inputIDCT1[2] = x2;
			inputIDCT1[3] = x3;
			inputIDCT1[4] = x4;
			inputIDCT1[5] = x5;
			inputIDCT1[6] = x6;
			inputIDCT1[7] = x7;
			inputIDCT1[8] = x8;
			inputIDCT1[9] = x9;
			inputIDCT1[10] = x10;
			inputIDCT1[11] = x11;
			inputIDCT1[12] = x12;
			inputIDCT1[13] = x13;
			inputIDCT1[14] = x14;
			inputIDCT1[15] = x15;
			inputIDCT1[16] = x16;
			inputIDCT1[17] = x17;
			inputIDCT1[18] = x18;
			inputIDCT1[19] = x19;
			inputIDCT1[20] = x20;
			inputIDCT1[21] = x21;
			inputIDCT1[22] = x22;
			inputIDCT1[23] = x23;
			inputIDCT1[24] = x24;
			inputIDCT1[25] = x25;
			inputIDCT1[26] = x26;
			inputIDCT1[27] = x27;
			inputIDCT1[28] = x28;
			inputIDCT1[29] = x29;
			inputIDCT1[30] = x30;
			inputIDCT1[31] = x31;
		end
			
	end
	
	
	//declaracion de bloque DCT1
	dct32
	#(
		.WIDTH_X (WIDTH_XDCT1),
		.WIDTH_Y (WIDTH_YDCT1)
	)
	dct32_etapa1
	(
		.clk (clk),
		.rst (rst),
		.load (load),
		.x0 (inputDCT1[0]),
		.x1 (inputDCT1[1]),
		.x2 (inputDCT1[2]),
		.x3 (inputDCT1[3]),
		.x4 (inputDCT1[4]),
		.x5 (inputDCT1[5]),
		.x6 (inputDCT1[6]),
		.x7 (inputDCT1[7]),
		.x8 (inputDCT1[8]),
		.x9 (inputDCT1[9]),
		.x10 (inputDCT1[10]),
		.x11 (inputDCT1[11]),
		.x12 (inputDCT1[12]),
		.x13 (inputDCT1[13]),
		.x14 (inputDCT1[14]),
		.x15 (inputDCT1[15]),
		.x16 (inputDCT1[16]),
		.x17 (inputDCT1[17]),
		.x18 (inputDCT1[18]),
		.x19 (inputDCT1[19]),
		.x20 (inputDCT1[20]),
		.x21 (inputDCT1[21]),
		.x22 (inputDCT1[22]),
		.x23 (inputDCT1[23]),
		.x24 (inputDCT1[24]),
		.x25 (inputDCT1[25]),
		.x26 (inputDCT1[26]),
		.x27 (inputDCT1[27]),
		.x28 (inputDCT1[28]),
		.x29 (inputDCT1[29]),
		.x30 (inputDCT1[30]),
		.x31 (inputDCT1[31]),
		.y0 (outputDCT1[0]),
		.y1 (outputDCT1[1]),
		.y2 (outputDCT1[2]),
		.y3 (outputDCT1[3]),
		.y4 (outputDCT1[4]),
		.y5 (outputDCT1[5]),
		.y6 (outputDCT1[6]),
		.y7 (outputDCT1[7]),
		.y8 (outputDCT1[8]),
		.y9 (outputDCT1[9]),
		.y10 (outputDCT1[10]),
		.y11 (outputDCT1[11]),
		.y12 (outputDCT1[12]),
		.y13 (outputDCT1[13]),
		.y14 (outputDCT1[14]),
		.y15 (outputDCT1[15]),
		.y16 (outputDCT1[16]),
		.y17 (outputDCT1[17]),
		.y18 (outputDCT1[18]),
		.y19 (outputDCT1[19]),
		.y20 (outputDCT1[20]),
		.y21 (outputDCT1[21]),
		.y22 (outputDCT1[22]),
		.y23 (outputDCT1[23]),
		.y24 (outputDCT1[24]),
		.y25 (outputDCT1[25]),
		.y26 (outputDCT1[26]),
		.y27 (outputDCT1[27]),
		.y28 (outputDCT1[28]),
		.y29 (outputDCT1[29]),
		.y30 (outputDCT1[30]),
		.y31 (outputDCT1[31])
	);
	
	//declaracion de bloque IDCT1
	idct32
	#(
		.WIDTH_X (WIDTH_XIDCT1),
		.WIDTH_Y (WIDTH_YIDCT1)
	)
	idct32_etapa1
	(
		.clk (clk),
		.rst (rst),
		.load (load),
		.x0 (inputIDCT1[0]),
		.x1 (inputIDCT1[1]),
		.x2 (inputIDCT1[2]),
		.x3 (inputIDCT1[3]),
		.x4 (inputIDCT1[4]),
		.x5 (inputIDCT1[5]),
		.x6 (inputIDCT1[6]),
		.x7 (inputIDCT1[7]),
		.x8 (inputIDCT1[8]),
		.x9 (inputIDCT1[9]),
		.x10 (inputIDCT1[10]),
		.x11 (inputIDCT1[11]),
		.x12 (inputIDCT1[12]),
		.x13 (inputIDCT1[13]),
		.x14 (inputIDCT1[14]),
		.x15 (inputIDCT1[15]),
		.x16 (inputIDCT1[16]),
		.x17 (inputIDCT1[17]),
		.x18 (inputIDCT1[18]),
		.x19 (inputIDCT1[19]),
		.x20 (inputIDCT1[20]),
		.x21 (inputIDCT1[21]),
		.x22 (inputIDCT1[22]),
		.x23 (inputIDCT1[23]),
		.x24 (inputIDCT1[24]),
		.x25 (inputIDCT1[25]),
		.x26 (inputIDCT1[26]),
		.x27 (inputIDCT1[27]),
		.x28 (inputIDCT1[28]),
		.x29 (inputIDCT1[29]),
		.x30 (inputIDCT1[30]),
		.x31 (inputIDCT1[31]),
		.y0 (outputIDCT1[0]),
		.y1 (outputIDCT1[1]),
		.y2 (outputIDCT1[2]),
		.y3 (outputIDCT1[3]),
		.y4 (outputIDCT1[4]),
		.y5 (outputIDCT1[5]),
		.y6 (outputIDCT1[6]),
		.y7 (outputIDCT1[7]),
		.y8 (outputIDCT1[8]),
		.y9 (outputIDCT1[9]),
		.y10 (outputIDCT1[10]),
		.y11 (outputIDCT1[11]),
		.y12 (outputIDCT1[12]),
		.y13 (outputIDCT1[13]),
		.y14 (outputIDCT1[14]),
		.y15 (outputIDCT1[15]),
		.y16 (outputIDCT1[16]),
		.y17 (outputIDCT1[17]),
		.y18 (outputIDCT1[18]),
		.y19 (outputIDCT1[19]),
		.y20 (outputIDCT1[20]),
		.y21 (outputIDCT1[21]),
		.y22 (outputIDCT1[22]),
		.y23 (outputIDCT1[23]),
		.y24 (outputIDCT1[24]),
		.y25 (outputIDCT1[25]),
		.y26 (outputIDCT1[26]),
		.y27 (outputIDCT1[27]),
		.y28 (outputIDCT1[28]),
		.y29 (outputIDCT1[29]),
		.y30 (outputIDCT1[30]),
		.y31 (outputIDCT1[31])
	);

endmodule
	
	
	
	

	