// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "11/15/2017 09:35:36"
                                                                                
// Verilog Test Bench template for design : transpuesta
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ps/ 1 ps
module transpuesta_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg clk;
reg load;
reg rst;
reg [20:0] x0;
reg [20:0] x1;
reg [20:0] x2;
reg [20:0] x3;
reg [20:0] x4;
reg [20:0] x5;
reg [20:0] x6;
reg [20:0] x7;
reg [20:0] x8;
reg [20:0] x9;
reg [20:0] x10;
reg [20:0] x11;
reg [20:0] x12;
reg [20:0] x13;
reg [20:0] x14;
reg [20:0] x15;
reg [20:0] x16;
reg [20:0] x17;
reg [20:0] x18;
reg [20:0] x19;
reg [20:0] x20;
reg [20:0] x21;
reg [20:0] x22;
reg [20:0] x23;
reg [20:0] x24;
reg [20:0] x25;
reg [20:0] x26;
reg [20:0] x27;
reg [20:0] x28;
reg [20:0] x29;
reg [20:0] x30;
reg [20:0] x31;
// wires                                               
wire [20:0]  y0;
wire [20:0]  y1;
wire [20:0]  y2;
wire [20:0]  y3;
wire [20:0]  y4;
wire [20:0]  y5;
wire [20:0]  y6;
wire [20:0]  y7;
wire [20:0]  y8;
wire [20:0]  y9;
wire [20:0]  y10;
wire [20:0]  y11;
wire [20:0]  y12;
wire [20:0]  y13;
wire [20:0]  y14;
wire [20:0]  y15;
wire [20:0]  y16;
wire [20:0]  y17;
wire [20:0]  y18;
wire [20:0]  y19;
wire [20:0]  y20;
wire [20:0]  y21;
wire [20:0]  y22;
wire [20:0]  y23;
wire [20:0]  y24;
wire [20:0]  y25;
wire [20:0]  y26;
wire [20:0]  y27;
wire [20:0]  y28;
wire [20:0]  y29;
wire [20:0]  y30;
wire [20:0]  y31;

// assign statements (if any)                          
transpuesta i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.load(load),
	.rst(rst),
	.x0(x0),
	.x1(x1),
	.x2(x2),
	.x3(x3),
	.x4(x4),
	.x5(x5),
	.x6(x6),
	.x7(x7),
	.x8(x8),
	.x9(x9),
	.x10(x10),
	.x11(x11),
	.x12(x12),
	.x13(x13),
	.x14(x14),
	.x15(x15),
	.x16(x16),
	.x17(x17),
	.x18(x18),
	.x19(x19),
	.x20(x20),
	.x21(x21),
	.x22(x22),
	.x23(x23),
	.x24(x24),
	.x25(x25),
	.x26(x26),
	.x27(x27),
	.x28(x28),
	.x29(x29),
	.x30(x30),
	.x31(x31),
	.y0(y0),
	.y1(y1),
	.y2(y2),
	.y3(y3),
	.y4(y4),
	.y5(y5),
	.y6(y6),
	.y7(y7),
	.y8(y8),
	.y9(y9),
	.y10(y10),
	.y11(y11),
	.y12(y12),
	.y13(y13),
	.y14(y14),
	.y15(y15),
	.y16(y16),
	.y17(y17),
	.y18(y18),
	.y19(y19),
	.y20(y20),
	.y21(y21),
	.y22(y22),
	.y23(y23),
	.y24(y24),
	.y25(y25),
	.y26(y26),
	.y27(y27),
	.y28(y28),
	.y29(y29),
	.y30(y30),
	.y31(y31)
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                          
                                                       
// --> end                                             
$display("Running testbench");                       
end                                                    
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
                                                       
@eachvec;                                              
// --> end                                             
end                                                    
endmodule

